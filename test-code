// Constants
const MILLIS_PER_DAY = 1000 * 60 * 60 * 24;

function main() {
  const ss = SpreadsheetApp.openByUrl(''); // v28
  const zombieDays = 366;
  const prodDays = 181;
  const timeZone = AdsApp.currentAccount().getTimeZone();
  
  const dateRanges = getDateRanges(zombieDays, prodDays, timeZone);

  // Queries
  const queries = {
    'r_camp': buildQuery(['segments.date', 'campaign.name', 'metrics.cost_micros', 'metrics.conversions', 'metrics.conversions_value', 'metrics.video_views', 'metrics.average_cpv', 'metrics.impressions', 'metrics.clicks', 'campaign.advertising_channel_type'], 'campaign', `${dateRanges.date30} AND campaign.advertising_channel_type = "PERFORMANCE_MAX"`, 'ORDER BY campaign.name'),
    // Add more queries here following the same pattern
  };

  // Execute queries and export to sheets
  Object.keys(queries).forEach(sheetName => {
    runReport(queries[sheetName], ss.getSheetByName(sheetName));
  });
}

function getDateRanges(zombieDays, prodDays, timeZone) {
  const now = new Date();
  const from = new Date(now.getTime() - zombieDays * MILLIS_PER_DAY);
  const prod180 = new Date(now.getTime() - prodDays * MILLIS_PER_DAY);
  const to = new Date(now.getTime() - 1 * MILLIS_PER_DAY);

  return {
    zombieRange: buildDateRange(from, to, timeZone),
    prodDate: buildDateRange(prod180, to, timeZone),
    date30: 'segments.date DURING LAST_30_DAYS',
    date07: 'segments.date DURING LAST_7_DAYS'
  };
}

function buildDateRange(from, to, timeZone) {
  return `segments.date BETWEEN "${Utilities.formatDate(from, timeZone, 'yyyy-MM-dd')}" AND "${Utilities.formatDate(to, timeZone, 'yyyy-MM-dd')}"`;
}

function buildQuery(fields, from, conditions, order) {
  return `SELECT ${fields.join(',')} FROM ${from} WHERE ${conditions} ${order}`;
}

function runReport(query, sheet) {
  const report = AdsApp.report(query);
  report.exportToSheet(sheet);
}
